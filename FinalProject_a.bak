;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname FinalProject_a) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
(require 2htdp/image)
(require 2htdp/universe)

;; A progress bar that will fill to 100% within a user specified time.
;; useful if you need to get up for a couple minutes but clients/bosses/etc. 
;; are uber concerned about productivity. "Ah, shoot! I've gotta wait for this
;; render to finish! Guess I'll get up and chat with co-workers for a couple minutes."

;; =================
;; Constants:

(define WINDOW-WIDTH 600)
(define WINDOW-HEIGHT 30)

(define BAR-HEIGHT WINDOW-HEIGHT)
(define BAR-COLOR "green")

(define MTS (empty-scene WINDOW-WIDTH WINDOW-HEIGHT))


;; =================
;; Data definitions:
(define-struct bar (x dx))
;; Bar is (make-bar Natural[0, WIDTH]. Integer)
;; interp. (make-bar x dx) is a bar with a width of x and velocity dx
;;         the x is the right edge of the bar
;;         x is in screen coordinates (pixels)
;;         dx is in pixels per tick

(define B1 (make-bar 10 3)) ; at pos 10 moving left -> right at 3px per tick

#;
(define (fn-for-bar b)
  (... (bar-x b)
       (bar-dx b)))

;; Template rules used:
;; - compound: 2 fields





;; =================
;; Functions:

;; Bar -> Bar
;; start the world with the time (in sec.) which is the amount of time
;; you would like to spend waiting for the bar to fill
;; 
(define (main b)
  (big-bang b                   ; Bar
            (on-tick   extend-bar .1)     ; Bar -> Bar
            (to-draw   render-bar)))   ; Bar -> Image

;; Bar -> Bar
;; increase bar x by dx
(check-expect (extend-bar (make-bar 300 3)) (make-bar (+ 300 3) 3))
(check-expect (extend-bar (make-bar 0 20)) (make-bar (+ 0 20) 20))

(check-expect (extend-bar (make-bar WINDOW-WIDTH 3)) (make-bar WINDOW-WIDTH 0))

;(define (extend-bar b) b) ;stub

; copied template from Bar definition
(define (extend-bar b)
  (cond [(> (+ (bar-x b) (bar-dx b)) WINDOW-WIDTH) (make-bar WINDOW-WIDTH 0)]
        [else
         (make-bar (+ (bar-x b) (/ 1 (bar-dx b)))
               (bar-dx b))]))



;; Bar -> Image
;; place image of bar on MTS starting at 0 with a width of x
(check-expect (render-bar (make-bar 300 3))
              (overlay/align "left" "middle"
               (rectangle 300 BAR-HEIGHT "solid" "blue")
               MTS))
(check-expect (render-bar (make-bar WINDOW-WIDTH 3))
              (overlay/align "left" "middle"
               (rectangle WINDOW-WIDTH BAR-HEIGHT "solid" "blue")
               MTS))

;(define (render-bar b) MTS) ;stub

; copied template from Bar definition

(define (render-bar b)
  (overlay/align "left" "middle" (rectangle (bar-x b) BAR-HEIGHT "solid" "blue")
           MTS))
       